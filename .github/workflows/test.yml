name: Back Merge handler

on:
  push:
    branches:
      - release/*

jobs:
  pr_release_to_develop:
    runs-on: ubuntu-latest
    if: startsWith(github.ref_name, 'release/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if PR exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_BRANCH="${GITHUB_REF_NAME}"
          RAW_PRS=$(gh pr list \
            --repo "$GITHUB_REPOSITORY" \
            --json baseRefName,headRefName)
          
          echo "$RAW_PRS" | jq '.'
          
          # отфильтруем
          MATCHING_COUNT=$(echo "$RAW_PRS" | jq "map(select(.baseRefName == \"main\" and .headRefName == \"$RELEASE_BRANCH\")) | length")

          echo "Matching PRs: $MATCHING_COUNT"
          
          prs=$(gh pr list \
              --repo "$GITHUB_REPOSITORY" \
              --json baseRefName,headRefName \
              --jq "map(select(.baseRefName == \"main\" and .headRefName == \"$RELEASE_BRANCH\")) | length")
          if ((prs > 0)); then
              echo "Pull Request already exists"
              echo "SKIP=true" >> $GITHUB_ENV
          fi
      - name: Check if release is ahead
        run: |
          RELEASE_BRANCH="${GITHUB_REF_NAME}"
          commits=$(git rev-list origin/main..origin/$RELEASE_BRANCH --count)
          if ((commits == 0)); then
            echo "No diffs was found between branches"
            echo "SKIP=true" >> $GITHUB_ENV
          fi
      - name: Create Pull Request
        if: env.SKIP != 'true'
        run: |
          RELEASE_BRANCH="${GITHUB_REF_NAME}"
          gh pr create \
            -B main \
            -H $RELEASE_BRANCH \
            --title "[GitHub Actions] Merge $RELEASE_BRANCH -> main" \
            --label back-merge \
            --body 'Autogenerated Pull Request for `back-merge` triggered by Github Actions'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
